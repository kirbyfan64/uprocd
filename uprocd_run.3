.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "UPROCD_RUN" "3" "January 2018" "" ""
.
.SH "NAME"
\fBuprocd_run\fR \- Enter the main uprocd daemon and fork the process
.
.SH "SYNOPSIS"
.
.nf

#include <uprocd\.h>

UPROCD_EXPORT uprocd_context * uprocd_run();
.
.fi
.
.SH "DESCRIPTION"
When this function is called from a native module, it will wait for a request, then return from a new, forked process\. It will return a context, which will contain the necessary information from \fBuprocctl\fR(1) to mimic the original session\. Once the module is ready, they should call \fBuprocd_context_enter\fR(3) to update the current environment to match that of the context\.
.
.P
Here is a more detailed description of what happens:
.
.IP "1." 4
A native module is loaded, performing steps further detailed in \fBuprocd_module_entry\fR(3)\.
.
.IP "2." 4
The native module, after initialization, calls \fBuprocd_run\fR\.
.
.IP "3." 4
\fBuprocd_run\fR will begin receiving D\-Bus messages from \fBuprocctl\fR(3)\. When a message to spawn a new program is received, \fBuprocd_run(3)\fR will retrieve \fBuprocctl\fR(3)\'s environment, place it in a context, and fork the process\. After the fork is complete, the new context is returned\.
.
.IP "4." 4
At this point, the module is now running inside of the forked process\. It is now the module\'s responsibility to initialize needed values, then enter the context via \fBuprocd_context_enter\fR(3)\.
.
.IP "" 0
.
.SH "RETURN VALUE"
A context object\. This function will never properly return from the original process; it will only ever return from the forked processes\. If there is code that should be run if an error occurs in the original process, use \fBuprocd_on_exit\fR(3) to attach an exit handler that will be run if an error occurs\.
.
.SH "SEE ALSO"
uprocd\.index(7), uprocd\.h(3), uprocctl(1), uprocd_context_enter(3), uprocd_module_entry(3), uprocd_on_exit(3)
