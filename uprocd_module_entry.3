.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "UPROCD_MODULE_ENTRY" "3" "January 2018" "" ""
.
.SH "NAME"
\fBuprocd_module_entry\fR \- Entry point for uprocd modules
.
.SH "SYNOPSIS"
.
.nf

#include <uprocd\.h>

UPROCD_EXPORT void uprocd_module_entry();
.
.fi
.
.SH "DESCRIPTION"
This is not a uprocd API function\. Your native modules should implement this function, which will be called to initialize and run your modules\.
.
.P
uprocd_module_entry should perform the following:
.
.IP "1." 4
Perform necessary initialization tasks\.
.
.IP "2." 4
Optionally call \fBuprocd_on_exit\fR(3) to set up any failure handlers if an error occurs\.
.
.IP "3." 4
Call \fBuprocd_run\fR(3) to fork the process and retrieve a context\.
.
.IP "4." 4
Use the \fBuprocd_context_*\fR functions to retrieve necessary information, such as the desired environment\.
.
.IP "5." 4
Perform set up steps that should be done before the new context is entered\.
.
.IP "6." 4
Call \fBuprocd_context_enter\fR(3) to enter the new context\.
.
.IP "7." 4
Call \fBuprocd_context_free\fR(3) only if you are done working with the context or any of its return values\.
.
.IP "8." 4
Run the main module code\.
.
.IP "" 0
.
.P
If this seems confusing, see \fBuprocd\.h\fR(3) and \fBuprocd\fR(7) for a higher\-level overview of the inner workings of uprocd\.
.
.SH "EXAMPLE"
.
.nf

// This is an example module\.

#include <uprocd\.h>

UPROCD_EXPORT void uprocd_module_entry() {
  initialize();
  uprocd_context *ctx = uprocd_run();

  int argc;
  char **argv;
  uprocd_context_get_args(&argc, &argv);
  set_program_arguments(argc, argv);

  run_main_program();
  uprocd_context_free(ctx);
}
.
.fi
.
.SH "SEE ALSO"
uprocd\.index(7), uprocd\.h(3), uprocd_on_exit(3), uprocd_run(3), uprocd_context_enter(3), uprocd_context_free(3), uprocd(7)
