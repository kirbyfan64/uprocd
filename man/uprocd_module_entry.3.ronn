# uprocd_module_entry(3) -- Entry point for uprocd modules

## SYNOPSIS

```c
#include <uprocd.h>

UPROCD_EXPORT int uprocd_module_entry();
```

## DESCRIPTION

This is not a uprocd API function. Your native modules should implement this function,
which will be called to initialize and run your modules.

uprocd_module_entry should perform the following:

1. Perform necessary initialization tasks.
2. Optionally call `uprocd_on_exit`(3) to set up any failure handlers if an error occurs.
3. Call `uprocd_run`(3) to fork the process and retrieve a context.
4. Use the `uprocd_context_*` functions to retrieve necessary information, such as the
   desired environment.
5. Perform set up steps that should be done before the new context is entered.
6. Call `uprocd_context_enter`(3) to enter the new context.
7. Call `uprocd_context_free`(3) only if you are done working with the context or any
   of its return values.
8. Run the main module code.
9. Return the desired exit code.

If this seems confusing, see `uprocd.h`(3) and `uprocd`(7) for a higher-level overview
of the inner workings of uprocd.

## EXAMPLE

```c
// This is an example module.

#include <uprocd.h>

UPROCD_EXPORT int uprocd_module_entry() {
  initialize();
  uprocd_context *ctx = uprocd_run();

  int argc;
  char **argv;
  uprocd_context_get_args(&argc, &argv);
  set_program_arguments(argc, argv);

  run_main_program();
  uprocd_context_free(ctx);
  return 0;
}
```

## SEE ALSO

uprocd.index(7), uprocd.h(3), uprocd_on_exit(3), uprocd_run(3), uprocd_context_enter(3),
uprocd_context_free(3), uprocd(7)
