.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "UPROCD" "7" "January 2018" "" ""
.
.SH "NAME"
\fBuprocd\fR \- Guide on managing uprocd modules with systemd
.
.SH "DESCRIPTION"
\fBuprocd\fR is a tool that starts processes in the background, then "freezes" them\. When you run a program using \fBuprocctl\fR(1), uprocd will fork the process and connect it to the current terminal\. This is essentially a form of "process caching" or "process preloading"; processes will start more quickly, as the expensive initialization steps have already taken place in the background\.
.
.SH "MODULES"
Module files are stored in any of the following locations:
.
.IP "\[ci]" 4
/usr/share/uprocd/modules \- Built\-in modules\.
.
.IP "\[ci]" 4
/usr/local/share/uprocd/modules \- Installed modules\.
.
.IP "\[ci]" 4
$XDG_CONFIG_HOME/uprocd/modules \- User modules\.
.
.IP "" 0
.
.P
(For more information on the module format, see \fBuprocd\.module\fR(5)\.)
.
.P
Each uprocd module is a seperate daemon, and all are started via the systemd unit uprocd@\. Therefore, primary management of uprocd modules uses \fBsystemctl\fR(1)\. In order to access a module, use the uprocd@ template unit, with the instance name set to the module name\. For instance, the python module will be under the systemd name uprocd@python\. uprocd logs can be viewed through either \fBsystemctl status\fR or \fBjournalctl\fR(1)\.
.
.P
Querying information about, or running, modules should be done via \fBuprocctl\fR(1)
.
.SH "MODULE MANAGEMENT EXAMPLES"
In order to load a module, use \fBsystemctl \-\-user start\fR:
.
.IP "" 4
.
.nf

$ systemctl \-\-user start uprocd@module\-name
.
.fi
.
.IP "" 0
.
.P
For example, to start the \fIpython\fR module, run:
.
.IP "" 4
.
.nf

$ systemctl \-\-user start uprocd@python
.
.fi
.
.IP "" 0
.
.P
To check module\'s status and logs, use \fBsystemctl \-\-user status\fR:
.
.IP "" 4
.
.nf

$ systemctl \-\-user status uprocd@module\-name
.
.fi
.
.IP "" 0
.
.P
Other commands:
.
.IP "" 4
.
.nf

$ systemctl \-\-user stop uprocd@module\-name
$ systemctl \-\-user restart uprocd@module\-name
.
.fi
.
.IP "" 0
.
.P
To view the full, non\-truncated logs, use \fBjournalctl\fR(1):
.
.IP "" 4
.
.nf

$ journalctl \-b \-\-user\-unit uprocd@module\-name
.
.fi
.
.IP "" 0
.
.SH "WORKINGS"
It is recommended you read this section if you plan on creating uprocd modules!
.
.P
When you start a uprocd service via systemd, a \fBuprocd\fR daemon is run for the module\. Every module has its own daemon\. The module will immediately perform any initialization steps, followed by relinquishing control back to the daemon\. When the user requests for a program to be run via \fBuprocctl\fR(1), the daemon will fork, and the forked process will give a "context" back to the module\.
.
.P
The context object contains the environment of and arguments passed to \fBuprocctl\fR(1)\. When the native module "enters" the context, its environment will be updated to match that of the \fBuprocctl\fR(1) caller, and it will be attached to the caller\'s terminal\. After this, the native module will run the desired program\.
.
.SH "SEE ALSO"
uprocd\.index(7), uprocctl(1), uprocd\.module(5), systemctl(1), journalctl(1)
